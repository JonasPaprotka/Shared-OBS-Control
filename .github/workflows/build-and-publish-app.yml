name: Build and Publish App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build the App
        run: npm run build

      - name: Package the App
        run: npm run dist

      - name: Extract Version
        id: extract_version
        run: echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Shared-OBS-Control-${{ env.VERSION }}
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Extract Version
        id: extract_version
        run: echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV

      - name: Delete Existing Release and Tag
        env:
          GH_TOKEN: ${{ secrets.SECRET_TOKEN }}
        run: |
          if gh release view "Shared-OBS-Control-v${{ env.VERSION }}" > /dev/null 2>&1; then
            echo "Deleting existing release for version ${{ env.VERSION }}...";
            gh release delete "Shared-OBS-Control-v${{ env.VERSION }}" --yes;
            git tag -d "v${{ env.VERSION }}" || true;
            git push origin --delete "v${{ env.VERSION }}" || true;
          fi

      - name: Publish Release
        env:
          GH_TOKEN: ${{ secrets.SECRET_TOKEN }}
        run: npm run dist -- --publish=always
